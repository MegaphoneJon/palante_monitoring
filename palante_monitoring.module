<?php

/**
 * Implements hook_requirements().
 */
function palante_monitoring_requirements($phase) {
  if ($phase != 'runtime') {
    exit;
  }
  $requirements = array();
  palante_monitoring_watchdog_severity($requirements);
  palante_monitoring_watchdog_age($requirements);
  palante_monitoring_backups($requirements);
  return $requirements;
}

/**
 * Check for watchdog entries of severity "alert", "critical", or "emergency".
 */
function palante_monitoring_watchdog_severity(&$requirements) {
  $sql = "SELECT wid, timestamp, severity, type, message FROM watchdog WHERE severity = " . WATCHDOG_EMERGENCY . " OR severity = " . WATCHDOG_ALERT . " OR severity = " . WATCHDOG_CRITICAL . ";";
  $result = db_query($sql);
  // debug($result, "result");
  if ($result->rowCount()) {
    // We found some entries, post a warning.
    $requirements['palante_monitoring_watchdog'] = array(
      'title' => "Palante Monitoring - Watchdog check",
      'value' => "Watchdog check found " . $result->rowCount() . " troubling entries",
      'description' => "This Palante Monitoring check triggers when there are watchdog entries of \"alert\", \"emergency\", or \"critical\"",
      'severity' => REQUIREMENT_ERROR,
    );
  }
  else {
    $requirements['palante_monitoring_watchdog'] = array(
      'title' => "Palante Monitoring - Watchdog check",
      'value' => "No alert, emergency, or critical messages found.",
      'severity' => REQUIREMENT_OK,
    );
  }
}

/**
 * Ensure the oldest watchdog entry is at least 5 days old.
 */
function palante_monitoring_watchdog_age(&$requirements) {
  // get the time of the oldest watchdog log entry
  $result = db_query_range('SELECT timestamp FROM watchdog ORDER BY timestamp',0,1)->fetchField();

  // find the time since that entry
  $time = "$result";
  $time_difference = strtotime('now') - $time;

  // put it into days
  $td_days = (int) ($time_difference / 86400);

  // if it's less than a day old
  if($td_days < 1) {
    // post a warning.
    $requirements['palante_monitoring_oldlog'] = array(
      'title' => "Palante Monitoring - Oldest Log Check",
      'value' => "Oldest Watchdog log is less than 1 day old!",
      'description' => "This Palante Monitoring check triggers when the oldest Watchdog logs are 5 days old or less",
      'severity' => REQUIREMENT_ERROR,
    );
  }

  // if it's less than or equal to 5 days old 
  elseif($td_days <= 5) {
    // post a warning.
    $requirements['palante_monitoring_oldlog'] = array(
      'title' => "Palante Monitoring - Oldest Log Check",
      'value' => "Oldest Watchdog log is only " . $td_days . " days old!",
      'description' => "This Palante Monitoring check triggers when the oldest Watchdog logs are 5 days old or less",
      'severity' => REQUIREMENT_ERROR,
    );  
  }

  // else all is well
  else {
    $requirements['palante_monitoring_oldlog'] = array(
      'title' => "Palante Monitoring - Oldest Log Check",
      'value' => "Oldest Watchdog log is " . $td_days . " days old",
      'severity' => REQUIREMENT_OK,
    );
  }
}

function palante_monitoring_backups(&$requirements) {

// output date to watchdog
$outputdate = date("Y/m/d H:i:s"). substr((string)microtime(), 1, 6);
watchdog('output date 1', "$outputdate");

//get backup names and locations from the drupal database
  $result = db_query("SELECT name, location FROM backup_migrate_destinations WHERE `location` REGEXP('daily$') OR `location` REGEXP('weekly$')");

    // go through each name and location found
    foreach($result as $item) { 

      // pull the information from the database and assign to variables
      // name of backup job
      $name = $item->name;
      // relative path of backup folder
      $location = $item->location;
      // convert relative path to real path
      $path = drupal_realpath($location);

      // find the most recent file in that path
      $latest_ctime = 0;
      $latest_filename = '';

      $d = dir($path);
      while (false !== ($entry = $d->read())) {
        $filepath = "{$path}/{$entry}";
        // is a file, ends in gz, and the file creation time is more recent than others
        if (is_file($filepath) && preg_match("/.gz$/", $filepath) && filemtime($filepath) > $latest_ctime) {
          $latest_ctime = filectime($filepath);
          $latest_filename = $entry;
        }
      }

      // now $latest_filename contains the filename of the file that changed last

      // string that we are looking for in the civi database to verify it ran correctly
      $civipattern = "CREATE TABLE `civicrm_worldregion`";

      // string that we are looking for in the drupal database to verify it ran correctly
      $drupalpattern = "CREATE TABLE `watchdog`";

      // declare and empty the contents variable
      $contents = '';

      // get the full file location
      $filename = "{$path}/{$latest_filename}";

      // open the file
      $zd = gzopen($filename, "r");

     // output the file as string to contents
      while (!gzeof($zd)) {
        $contents .= gzgets($zd, 4096);
      }

      // look through contents to see if the civi or drupal strings appear
      $civifind = strpos($contents, $civipattern);
      $drupalfind = strpos($contents, $drupalpattern);

      // begin generating results

      // if backup name includes Daily and file is older than 25 hours
      if (
        (preg_match("/\bDaily\b/",$name)) && (time()-filemtime("{$path}/{$latest_filename}") > 25 * 3600))
        {

        // get age of file in hours
        $age = (int) ((time()-filemtime("{$path}/{$latest_filename}")) / 3600);

        // output hours old
        $requirements["palante_monitoring_backup" . $name] = array(
        'title' => "Palante Monitoring - " . $name . " backup",
        'value' => "The latest " . $name . " backup, " . $latest_filename . ", is " . $age . " hours old!",
        'severity' => REQUIREMENT_ERROR,
        ); 

        }
 
      elseif (

        // if backup name includes Weekly and file is older than 8 days
        (preg_match("/\bWeekly\b/",$name)) && (time()-filemtime("{$path}/{$latest_filename}") > 8 * 24 * 3600))
        {   

        // get age of file in days
        $age = (int) ((time()-filemtime("{$path}/{$latest_filename}")) / (24 * 3600));

        // output days old
        $requirements["palante_monitoring_backup" . $name] = array(
        'title' => "Palante Monitoring - " . $name . " backup",   
        'value' => "The latest " . $name . " backup, " . $latest_filename . ", is " . $age . " days old!",
        'severity' => REQUIREMENT_ERROR,
        ); 

        }

      elseif (

        // if backup but doesn't contain the desired string
        (preg_match("/\bdrupal\b/",$path) && $drupalfind === FALSE) OR 
	(preg_match("/\bcivi\b/",$path) && $civifind === FALSE) OR 
	( $drupalfind === FALSE && $civifind === FALSE ))

        {
        // output did not run properly
        $requirements["palante_monitoring_backup" . $name] = array(
        'title' => "Palante Monitoring - " . $name . " backup",
        'value' => "The latest " . $name . " backup, " . $latest_filename . ", did not run properly!",
        'severity' => REQUIREMENT_ERROR,
        );
        }

      else {
      // else all is well output
      $requirements["palante_monitoring_backuplocation" . $name] = array(
        'title' => "Palante Monitoring - " . $name . " backup",
        'value' => "This backup lives at " . $path . ", and the lastest backup is " . $latest_filename,
        'severity' => REQUIREMENT_OK,
        );
        }
  } 

// output date to watchdog
$outputdate = date("Y/m/d H:i:s"). substr((string)microtime(), 1, 6);
watchdog('output date 2', "$outputdate");

}
