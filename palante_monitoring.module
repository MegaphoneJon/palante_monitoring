<?php

/**
 * Implements hook_requirements().
 */
function palante_monitoring_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $sql = "SELECT wid, timestamp, severity, type, message FROM watchdog WHERE severity = " . WATCHDOG_EMERGENCY . " OR severity = " . WATCHDOG_ALERT . " OR severity = " . WATCHDOG_CRITICAL . ";";
    $result = db_query($sql);
    // debug($result, "result");
    if ($result->rowCount()) {
      // We found some entries, post a warning.
      $requirements['palante_monitoring_watchdog'] = array(
        'title' => "Palante Monitoring - Watchdog check",
        'value' => "Watchdog check found " . $result->rowCount() . " troubling entries",
        'description' => "This Palante Monitoring check triggers when there are watchdog entries of \"alert\", \"emergency\", or \"critical\"",
        'severity' => REQUIREMENT_ERROR,
      );
    }
    else {
      $requirements['palante_monitoring_watchdog'] = array(
        'title' => "Palante Monitoring - Watchdog check",
        'value' => "No alert, emergency, or critical messages found.",
        'severity' => REQUIREMENT_OK,
      );
    }
  }

if ($phase == 'runtime') {
    // get the time of the oldest watchdog log entry
    $result = db_query_range('SELECT timestamp FROM watchdog ORDER BY timestamp',0,1)->fetchField();

    // find the time since that entry
    $time = "$result";
    $time_difference = strtotime('now') - $time;

    // put it into days
    $td_days = (int) ($time_difference / 86400);

    // if it's less than a day old
    if($td_days < 1) {
      // post a warning.
      $requirements['palante_monitoring_oldlog'] = array(
        'title' => "Palante Monitoring - Oldest Log Check",
        'value' => "Oldest Watchdog log is less than 1 day old!",
        'description' => "This Palante Monitoring check triggers when the oldest Watchdog logs are 5 days old or less",
        'severity' => REQUIREMENT_ERROR,
      );
    }

    // if it's less than or equal to 5 days old 
    elseif($td_days <= 5) {
      // post a warning.
      $requirements['palante_monitoring_oldlog'] = array(
        'title' => "Palante Monitoring - Oldest Log Check",
        'value' => "Oldest Watchdog log is only " . $td_days . " days old!",
        'description' => "This Palante Monitoring check triggers when the oldest Watchdog logs are 5 days old or less",
        'severity' => REQUIREMENT_ERROR,
      );  
    
    }   

    // else all is well
    else {
      $requirements['palante_monitoring_oldlog'] = array(
        'title' => "Palante Monitoring - Oldest Log Check",
        'value' => "Oldest Watchdog log is " . $td_days . " days old",
        'severity' => REQUIREMENT_OK,
      );
    }

  }

if ($phase == 'runtime') {

  //get backup names and locations
  $result = db_query("SELECT name, location FROM backup_migrate_destinations WHERE `location` REGEXP('daily$') OR `location` REGEXP('weekly$')");

    // go through each name and location found  
    foreach($result as $item) { 
      // name of backup job
      $name = $item->name;
      // relative path of backup folder
      $location = $item->location;
      // convert relative path to real path
      $path = drupal_realpath($location);

      // find the most recent file in that path
      $latest_ctime = 0;
      $latest_filename = '';

      $d = dir($path);
      while (false !== ($entry = $d->read())) {
        $filepath = "{$path}/{$entry}";
        // is a file, has a creation time, and ends in .msql.gz
        if (is_file($filepath) && filectime($filepath) && glob('*.mysql.gz$') > $latest_ctime) {
          $latest_ctime = filectime($filepath);
          $latest_filename = $entry;
        }
      }

      // now $latest_filename contains the filename of the file that changed last


      $requirements["palante_monitoring_backuplocation" . $name] = array(
        'title' => "Palante Monitoring - " . $name . " backup",
        'value' => "This backup lives at " . $path . ", and the lastest backup is " . $latest_filename,
        'severity' => REQUIREMENT_OK,
      );
  } 
}

  return $requirements;
}
